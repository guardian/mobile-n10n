AWSTemplateFormatVersion: 2010-09-09
Description: Consumes events produced when an app receives a notification
Parameters:
  Stack:
    Description: Stack name
    Type: String
    Default: mobile-notifications
  App:
    Description: Application name
    Type: String
    Default: eventconsumer
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
    - CODE
    - PROD
    Default: CODE
  DeployBucket:
    Description: Bucket where RiffRaff uploads artifacts on deploy
    Type: String
    Default: mobile-notifications-dist
  BucketNamePrefix:
    Description: Bucket name prefix to use
    Type: String
  AthenaDatabase:
    Description: Athena Database to query
    Type: String
Mappings:
  StageVariables:
    CODE:
      BucketStage: code
    PROD:
      BucketStage: prod
Resources:
  Sqs:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 300
  SqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
      - Ref: Sqs
      PolicyDocument:
        Version: "2012-10-17"
        Id: !Sub "Sqs${Stage}Policy"
        Statement:
        - Resource: !GetAtt Sqs.Arn
          Effect: "Allow"
          Sid: "Allow-User-SendMessage"
          Action:
          - "sqs:*"
          Condition:
            ArnLike:
              aws:SourceArn:
              - !Sub
                - arn:aws:s3:::aws-mobile-event-logs-${BucketStage}
                - BucketStage: !FindInMap [StageVariables, !Ref Stage, BucketStage]
          Principal:
            AWS: "*"
  ExecutionRole:
    Type: AWS::IAM::Role
    DependsOn: Sqs
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: logs:CreateLogGroup
            Resource: !Sub "arn:aws:logs:eu-west-1:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - !Sub "arn:aws:logs:eu-west-1:${AWS::AccountId}:log-group:/aws/lambda/eventconsumer-${Stage}:*"
            - !Sub "arn:aws:logs:eu-west-1:${AWS::AccountId}:log-group:/aws/lambda/eventconsumer-sqs-${Stage}:*"
            - !Sub "arn:aws:logs:eu-west-1:${AWS::AccountId}:log-group:/aws/lambda/eventconsumer-athena-${Stage}:*"
      - PolicyName: Athena
        PolicyDocument:
          Statement:
            Effect: Allow
            Action:
            - athena:StartQueryExecution
            - athena:GetQueryResultsStream
            - athena:GetNamespace
            - athena:GetQueryResults
            - athena:GetQueryExecutions
            - athena:GetNamedQuery
            - athena:GetCatalogs
            - athena:GetNamespaces
            - athena:GetWorkGroup
            - athena:GetExecutionEngine
            - athena:GetQueryExecution
            - athena:GetExecutionEngines
            - athena:GetTables
            - athena:GetTable
            - athena:BatchGetNamedQuery
            - athena:BatchGetQueryExecution
            - glue:GetTable
            - glue:GetPartition
            - glue:GetPartitions
            - glue:GetDatabase
            Resource: "*"
      - PolicyName: s3
        PolicyDocument:
          Statement:
            Effect: Allow
            Action:
            - s3:*
            Resource:
            - !Sub
              - arn:aws:s3:::aws-mobile-event-logs-${BucketStage}
              - BucketStage: !FindInMap [StageVariables, !Ref Stage, BucketStage]
            - !Sub
              - arn:aws:s3:::aws-mobile-event-logs-${BucketStage}/*
              - BucketStage: !FindInMap [StageVariables, !Ref Stage, BucketStage]

      - PolicyName: Dynamo
        PolicyDocument:
          Statement:
            Effect: Allow
            Action: dynamodb:*
            Resource: !Sub "arn:aws:dynamodb:eu-west-1:${AWS::AccountId}:table/mobile-notifications-reports-${Stage}"
      - PolicyName: SQS
        PolicyDocument:
          Statement:
            Effect: Allow
            Action: sqs:*
            Resource: !GetAtt Sqs.Arn


  SqsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${App}-sqs-${Stage}
      Code:
        S3Bucket:
          Ref: DeployBucket
        S3Key: !Sub ${Stack}/${Stage}/${App}/${App}.jar
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
      Description: Consumes queue events
      Handler: com.gu.notifications.events.SqsLambda::handleRequest
      MemorySize: 384
      Role: !GetAtt ExecutionRole.Arn
      Runtime: java8
      Timeout: 300
      ReservedConcurrentExecutions: 1

  AthenaLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${App}-athena-${Stage}
      Code:
        S3Bucket:
          Ref: DeployBucket
        S3Key: !Sub ${Stack}/${Stage}/${App}/${App}.jar
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
          IngestLocation: !Sub
            - s3://${BucketNamePrefix}-${BucketStage}/fastly
            - BucketStage: !FindInMap [StageVariables, !Ref Stage, BucketStage]
          AthenaOutputLocation: !Sub
            - s3://${BucketNamePrefix}-${BucketStage}/athena
            - BucketStage: !FindInMap [StageVariables, !Ref Stage, BucketStage]
          AthenaDatabase: !Ref AthenaDatabase
      Description: Queries Athena to update Notification reports in Dynamodb
      Handler: com.gu.notifications.events.AthenaLambda::handleRequest
      MemorySize: 384
      Role: !GetAtt ExecutionRole.Arn
      Runtime: java8
      Timeout: 300

  S3Bucket:
    Type: AWS::S3::Bucket
    DependsOn:
    - Sqs
    - SqsPolicy
    Properties:
      AccessControl: Private
      BucketName: !Sub
      - ${BucketNamePrefix}-${BucketStage}
      - BucketStage: !FindInMap [StageVariables, !Ref Stage, BucketStage]
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 21
            Status: Enabled
      NotificationConfiguration:
        QueueConfigurations:
        - Event: s3:ObjectCreated:*
          Queue: !GetAtt Sqs.Arn
          Filter:
            S3Key:
              Rules:
                - Name: prefix
                  Value: fastly/

  SqsEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
    - Sqs
    - SqsLambda
    Properties:
      BatchSize: 10
      Enabled: True
      EventSourceArn: !GetAtt Sqs.Arn
      FunctionName: !Sub ${App}-sqs-${Stage}
