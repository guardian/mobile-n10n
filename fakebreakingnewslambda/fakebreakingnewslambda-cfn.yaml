AWSTemplateFormatVersion: 2010-09-09
Description: Emits fake breaking news
Parameters:
  App:
    Description: App name
    Type: String
    Default: fakebreakingnews
    AllowedValues:
      - fakebreakingnews
  Stack:
    Description: Stack name
    Type: String
    Default: mobile-notifications
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
    - CODE
    - PROD
    Default: CODE
  DeployBucket:
    Description: Bucket where RiffRaff uploads artifacts on deploy
    Type: String
    Default: mobile-notifications-dist

Resources:
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: logs:CreateLogGroup
            Resource: !Sub "arn:aws:logs:eu-west-1:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - !Sub "arn:aws:logs:eu-west-1:${AWS::AccountId}:log-group:/aws/lambda/${Stack}-${App}-${Stage}:*"
      - PolicyName: Conf
        PolicyDocument:
          Statement:
          - Action: ssm:GetParametersByPath
            Effect: Allow
            Resource:
              !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/notifications/${Stage}/fakebreakingnews

  FakeBreakingNewsFunction:
    DependsOn:
      - ExecutionRole
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Stack}-${App}-${Stage}
      Code:
        S3Bucket:
          Ref: DeployBucket
        S3Key: !Sub ${Stack}/${Stage}/fakebreakingnewslambda/fakebreakingnewslambda.jar
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
      Description: Sends a fake breaking news
      Handler: fakebreakingnews.FakeBreakingNewsLambda::handleRequest
      MemorySize: 512
      Role: !GetAtt ExecutionRole.Arn
      Runtime: java8
      Timeout: 300
      Tags:
        - Key: Stage
          Value: !Ref Stage
        - Key: Stack
          Value: !Ref Stack
        - Key: App
          Value: !Ref App

  FakeBreakingNewsScheduleEventRule:
    DependsOn:
      - FakeBreakingNewsFunction
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "cron(5 * * * ? *)"
      Targets:
        - Id: !Sub ${Stack}-${App}-${Stage}
          Arn: !GetAtt FakeBreakingNewsFunction.Arn

  FakeBreakingNewsScheduleEventPermission:
    DependsOn:
      - FakeBreakingNewsFunction
      - FakeBreakingNewsScheduleEventRule
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FakeBreakingNewsFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt FakeBreakingNewsScheduleEventRule.Arn
