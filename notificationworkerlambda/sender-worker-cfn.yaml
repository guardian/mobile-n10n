AWSTemplateFormatVersion: 2010-09-09
Description: Consumes batched tokens with notifications to send to individual devices
Parameters:
  Stack:
    Description: Stack name
    Type: String
    Default: mobile-notifications
  App:
    Description: Application name
    Type: String
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
    - CODE
    - PROD
    Default: CODE
  DeployBucket:
    Description: Bucket where RiffRaff uploads artifacts on deploy
    Type: String
    Default: mobile-notifications-dist
  SenderFullyQualifiedHandler:
    Description: The full name of the handler for sending notifications, including path, class name and method
    Type: String
  CleanerQueueArn:
    Type: String
    Description: The ARN of the cleaner SQS queue
  AlarmTopic:
    Type: String
    Description: The ARN of the SNS topic to send all the cloudwatch alarms to
  Platform:
    Type: String
    Description: The platform handled by this worker
    AllowedValues:
      - android
      - ios
      - android-edition
      - ios-edition

Conditions:
  IsProdStage: !Equals [!Ref Stage, PROD]

Resources:
  SenderDlq:
    Type: AWS::SQS::Queue
    Properties:
      Tags:
        - Key: Stage
          Value: !Ref Stage
        - Key: Stack
          Value: !Ref Stack
        - Key: App
          Value: !Ref App

  SenderSqs:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 45
      MessageRetentionPeriod: 3600 # 1 hour
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SenderDlq.Arn
        maxReceiveCount: 5
      Tags:
        - Key: Stage
          Value: !Ref Stage
        - Key: Stack
          Value: !Ref Stack
        - Key: App
          Value: !Ref App

  ExecutionRole:
    Type: AWS::IAM::Role
    DependsOn:
    - SenderSqs
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: logs:CreateLogGroup
            Resource: !Sub "arn:aws:logs:eu-west-1:${AWS::AccountId}:*"
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - !Sub "arn:aws:logs:eu-west-1:${AWS::AccountId}:log-group:/aws/lambda/${App}-sender-${Stage}:*"
      - PolicyName: SQSInput
        PolicyDocument:
          Statement:
            Effect: Allow
            Action: sqs:*
            Resource:
            - !GetAtt SenderSqs.Arn
      - PolicyName: SQSOutput
        PolicyDocument:
          Statement:
            Effect: Allow
            Action: sqs:SendMessage
            Resource: !Ref CleanerQueueArn
      - PolicyName: Conf
        PolicyDocument:
          Statement:
          - Action: ssm:GetParametersByPath
            Effect: Allow
            Resource:
              !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/notifications/${Stage}/workers
      - PolicyName: Cloudwatch
        PolicyDocument:
          Statement:
            Effect: Allow
            Action: cloudwatch:PutMetricData
            Resource: "*"


  SenderLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${App}-sender-${Stage}
      Code:
        S3Bucket:
          Ref: DeployBucket
        S3Key: !Sub ${Stack}/${Stage}/notificationworkerlambda/notificationworkerlambda.jar
      Environment:
        Variables:
          Stage: !Ref Stage
          Stack: !Ref Stack
          App: !Ref App
          Platform: !Ref Platform
      Description: Sends notifications
      Handler: !Ref SenderFullyQualifiedHandler
      MemorySize: 3008
      Role: !GetAtt ExecutionRole.Arn
      Runtime: java8
      Timeout: 45
      ReservedConcurrentExecutions: 1000
      Tags:
        - Key: Stage
          Value: !Ref Stage
        - Key: Stack
          Value: !Ref Stack
        - Key: App
          Value: !Ref App

  SenderSqsEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
      - SenderSqs
      - SenderLambda
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn: !GetAtt SenderSqs.Arn
      FunctionName: !Sub ${App}-sender-${Stage}

  SenderThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions: [!Ref AlarmTopic]
      AlarmDescription: !Sub Triggers if the ${App} sender lambda is throttled in ${Stage}
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Sub ${App}-sender-${Stage}
      EvaluationPeriods: 1
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 360
      Statistic: Sum
      Threshold: 0

  SenderErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions: [!Ref AlarmTopic]
      AlarmDescription: !Sub Triggers if the ${App} sender lambda errors in ${Stage}
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Sub ${App}-sender-${Stage}
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 360
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching

  SenderTooFewInvocationsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions: [!Ref AlarmTopic]
      ActionsEnabled: !If [IsProdStage, true, false]
      AlarmDescription: !Sub Triggers if the ${App} senderlambda is not frequently invoked in ${Stage}
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Sub ${App}-sender-${Stage}
      EvaluationPeriods: 1
      MetricName: Invocations
      Namespace: AWS/Lambda
      Period: 7200
      Statistic: Sum
      Threshold: 0
      TreatMissingData: breaching